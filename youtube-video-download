<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>YouTube Video Downloader</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f5f5;
        }
        .container {
            background-color: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }
        h1 {
            color: #ff0000;
            text-align: center;
        }
        .input-group {
            margin-bottom: 20px;
        }
        input[type="url"] {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 16px;
        }
        button {
            background-color: #ff0000;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
        }
        button:hover {
            background-color: #cc0000;
        }
        #qualityOptions {
            margin: 20px 0;
            display: none;
        }
        #progressContainer {
            margin-top: 20px;
            display: none;
        }
        progress {
            width: 100%;
            height: 20px;
        }
        #downloadLink {
            display: block;
            margin-top: 20px;
            color: #ff0000;
            text-decoration: none;
            font-weight: bold;
            display: none;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>YouTube Video Downloader</h1>
        <div class="input-group">
            <input type="url" id="youtubeUrl" placeholder="Enter YouTube video URL (e.g., https://www.youtube.com/watch?v=VIDEO_ID)" required>
        </div>
        <button id="fetchBtn">Fetch Video</button>
        
        <div id="qualityOptions">
            <h3>Select Quality:</h3>
            <select id="qualitySelect"></select>
            <button id="downloadBtn">Download</button>
        </div>
        
        <div id="progressContainer">
            <h3>Download Progress:</h3>
            <progress id="downloadProgress" value="0" max="100"></progress>
            <span id="progressText">0%</span>
        </div>
        
        <a id="downloadLink" href="#" target="_blank">Download Complete! Click to open</a>
    </div>

    <script>
        document.getElementById('fetchBtn').addEventListener('click', fetchVideoInfo);
        document.getElementById('downloadBtn').addEventListener('click', downloadVideo);

        async function fetchVideoInfo() {
            const youtubeUrl = document.getElementById('youtubeUrl').value;
            if (!youtubeUrl) {
                alert('Please enter a YouTube URL');
                return;
            }

            try {
                // In a real implementation, you would call your backend API here
                // For demo purposes, we'll simulate the response
                console.log('Fetching video info for:', youtubeUrl);
                
                // Simulate API call delay
                await new Promise(resolve => setTimeout(resolve, 1500));
                
                // Simulated response (in real app, you'd get this from your backend)
                const simulatedResponse = {
                    success: true,
                    title: "Sample YouTube Video",
                    thumbnail: "https://i.ytimg.com/vi/dQw4w9WgXcQ/maxresdefault.jpg",
                    formats: [
                        { quality: "1080p", itag: 137, type: "video/mp4" },
                        { quality: "720p", itag: 136, type: "video/mp4" },
                        { quality: "480p", itag: 135, type: "video/mp4" },
                        { quality: "360p", itag: 134, type: "video/mp4" },
                        { quality: "Audio Only", itag: 140, type: "audio/mp4" }
                    ]
                };

                if (simulatedResponse.success) {
                    const qualitySelect = document.getElementById('qualitySelect');
                    qualitySelect.innerHTML = '';
                    
                    simulatedResponse.formats.forEach(format => {
                        const option = document.createElement('option');
                        option.value = format.itag;
                        option.textContent = `${format.quality} (${format.type})`;
                        qualitySelect.appendChild(option);
                    });
                    
                    document.getElementById('qualityOptions').style.display = 'block';
                } else {
                    alert('Error fetching video information');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('An error occurred while fetching video information');
            }
        }

        async function downloadVideo() {
            const itag = document.getElementById('qualitySelect').value;
            const youtubeUrl = document.getElementById('youtubeUrl').value;
            
            if (!itag || !youtubeUrl) {
                alert('Please select a quality and ensure URL is valid');
                return;
            }

            try {
                document.getElementById('progressContainer').style.display = 'block';
                const progressBar = document.getElementById('downloadProgress');
                const progressText = document.getElementById('progressText');
                
                // Simulate download progress (in real app, you'd get this from your backend)
                for (let i = 0; i <= 100; i++) {
                    await new Promise(resolve => setTimeout(resolve, 50));
                    progressBar.value = i;
                    progressText.textContent = `${i}%`;
                    
                    if (i === 100) {
                        document.getElementById('downloadLink').style.display = 'block';
                        document.getElementById('downloadLink').textContent = 
                            'Download Complete! Click to open (simulated)';
                    }
                }
                
                // In a real implementation, you would:
                // 1. Call your backend API with the YouTube URL and selected itag
                // 2. The backend would process the download
                // 3. Return the download link to the frontend
                // 4. Set the downloadLink href to the actual file URL
            } catch (error) {
                console.error('Error:', error);
                alert('An error occurred during download');
            }
        }
    </script>
</body>
</html>
